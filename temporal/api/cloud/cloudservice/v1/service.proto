syntax = "proto3";

package temporal.api.cloud.cloudservice.v1;

option go_package = "go.temporal.io/api/cloud/cloudservice/v1;cloudservice";

import "temporal/api/cloud/cloudservice/v1/request_response.proto";
import "google/api/annotations.proto";

service CloudService {
    // Gets all known users
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
	option (google.api.http) = {
            get: "/api/v1/users",
        };
    }
    
    // Get a user
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
	option (google.api.http) = {
            get: "/api/v1/users/{user_id}",
        };
    }

    // Create a user
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/users",
	    body: "*"
        };
    }

    // Update a user
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
	option (google.api.http) = {
            post: "/api/v1/users/{user_id}",
	    body: "*"
        };
    }

    // Delete a user
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
	option (google.api.http) = {
            delete: "/api/v1/users/{user_id}",
        };
    }

    // Set a user's access to a namespace
    rpc SetUserNamespaceAccess(SetUserNamespaceAccessRequest) returns (SetUserNamespaceAccessResponse) {
	option (google.api.http) = {
            post: "/api/v1/namespaces/{namespace}/users/{user_id}/access",
	    body: "*"
        };
    }

    // Get the latest information on an async operation
    rpc GetAsyncOperation(GetAsyncOperationRequest) returns (GetAsyncOperationResponse) {
        option (google.api.http) = {
            get: "/api/v1/operations/{async_operation_id}",
        };
    }

    // Create a new namespace
    rpc CreateNamespace (CreateNamespaceRequest) returns (CreateNamespaceResponse) {
	option (google.api.http) = {
            post: "/api/v1/namespaces",
	    body: "*"
        };
    }
    
    // Get all namespaces
    rpc GetNamespaces (GetNamespacesRequest)  returns (GetNamespacesResponse) {
	option (google.api.http) = {
            get: "/api/v1/namespaces",
        };
    }

    // Get a namespace
    rpc GetNamespace (GetNamespaceRequest) returns (GetNamespaceResponse) {
	option (google.api.http) = {
            get: "/api/v1/namespaces/{namespace}",
        };
    }

    // Update a namespace
    rpc UpdateNamespace (UpdateNamespaceRequest) returns (UpdateNamespaceResponse) {
	option (google.api.http) = {
            post: "/api/v1/namespaces/{namespace}",
	    body: "*"
        };
    }

    // Rename an existing customer search attribute
    rpc RenameCustomSearchAttribute (RenameCustomSearchAttributeRequest) returns (RenameCustomSearchAttributeResponse) {
	option (google.api.http) = {
            post: "/api/v1/namespaces/{namespace}/rename-custom-search-attribute",
	    body: "*"
        };
    }

    // Delete a namespace
    rpc DeleteNamespace (DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {
	option (google.api.http) = {
            delete: "/api/v1/namespaces/{namespace}",
        };
    }

    // Get all regions
    rpc GetRegions (GetRegionsRequest) returns (GetRegionsResponse) {
	option (google.api.http) = {
            get: "/api/v1/regions",
        };
    }

    // Get a region
    rpc GetRegion (GetRegionRequest) returns (GetRegionResponse) {
	option (google.api.http) = {
            get: "/api/v1/regions/{region}",
        };
    }
}
