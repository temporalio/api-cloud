syntax = "proto3";

package temporal.api.cloud.cloudservice.v1;

option go_package = "go.temporal.io/api/cloud/cloudservice/v1;cloudservice";

import "temporal/api/cloud/operation/v1/message.proto";
import "temporal/api/cloud/identity/v1/message.proto";
import "temporal/api/cloud/namespace/v1/message.proto";
import "temporal/api/cloud/region/v1/message.proto";
import "temporal/api/cloud/account/v1/message.proto";
import "temporal/api/cloud/sink/v1/message.proto";

message GetUsersRequest {
    // The requested size of the page to retrieve - optional.
    // Cannot exceed 1000. Defaults to 100. 
    int32 page_size = 1;
    // The page token if this is continuing from another response - optional.
    string page_token = 2;
    // Filter users by email address - optional.
    string email = 3;
    // Filter users by the namespace they have access to - optional.
    string namespace = 4;
}

message GetUsersResponse {
    // The list of users in ascending ids order
    repeated temporal.api.cloud.identity.v1.User users = 1;
    // The next page's token
    string next_page_token = 2;
}

message GetUserRequest {
    // The id of the user to get
    string user_id = 1;
}

message GetUserResponse {
    // The user
    temporal.api.cloud.identity.v1.User user = 1;
}

message CreateUserRequest {
    // The spec for the user to invite
    temporal.api.cloud.identity.v1.UserSpec spec = 1;
    // The id to use for this async operation - optional
    string async_operation_id = 2;
}

message CreateUserResponse {
    // The id of the user that was invited
    string user_id = 1;
    // The async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 2;
}

message UpdateUserRequest {
    // The id of the user to update
    string user_id = 1;
    // The new user specification
    temporal.api.cloud.identity.v1.UserSpec spec = 2;
    // The version of the user for which this update is intended for
    // The latest version can be found in the GetUser operation response
    string resource_version = 3;
    // The id to use for this async operation - optional
    string async_operation_id = 4;
}

message UpdateUserResponse {
    // The async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message DeleteUserRequest {
    // The id of the user to delete
    string user_id = 1;
    // The version of the user for which this delete is intended for
    // The latest version can be found in the GetUser operation response
    string resource_version = 2;
    // The id to use for this async operation - optional
    string async_operation_id = 3;
}

message DeleteUserResponse {
    // The async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message SetUserNamespaceAccessRequest {
    // The namespace to set permissions for
    string namespace = 1;
    // The id of the user to set permissions for
    string user_id = 2;
    // The namespace access to assign the user
    temporal.api.cloud.identity.v1.NamespaceAccess access = 3;
    // The version of the user for which this update is intended for
    // The latest version can be found in the GetUser operation response
    string resource_version = 4;
    // The id to use for this async operation - optional
    string async_operation_id = 5;
}

message SetUserNamespaceAccessResponse {
    // The async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message GetAsyncOperationRequest {
    // The id of the async operation to get
    string async_operation_id = 1;
}

message GetAsyncOperationResponse {
    // The async operation
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message CreateNamespaceRequest {
    // The namespace specification.
    temporal.api.cloud.namespace.v1.NamespaceSpec spec = 2;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 3;
}

message CreateNamespaceResponse {
    // The namespace that was created.
    string namespace = 1;
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 2;
}

message GetNamespacesRequest {
    // The requested size of the page to retrieve.
    // Cannot exceed 1000. 
    // Optional, defaults to 100. 
    int32 page_size = 1;
    // The page token if this is continuing from another response.
    // Optional, defaults to empty.
    string page_token = 2;
    // Filter namespaces by their name.
    // Optional, defaults to empty.
    string name = 3;
}

message GetNamespacesResponse {
    // The list of namespaces in ascending name order.
    repeated temporal.api.cloud.namespace.v1.Namespace namespaces = 1;
    // The next page's token.
    string next_page_token = 2;
}

message GetNamespaceRequest {
    // The namespace to get.
    string namespace = 1;
}

message GetNamespaceResponse {
    // The namespace.
    temporal.api.cloud.namespace.v1.Namespace namespace = 1;
}

message UpdateNamespaceRequest {
    // The namespace to update.
    string namespace = 1;
    // The new namespace specification.
    temporal.api.cloud.namespace.v1.NamespaceSpec spec = 2;
    // The version of the namespace for which this update is intended for.
    // The latest version can be found in the namespace status.
    string resource_version = 3;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 4;
}

message UpdateNamespaceResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message RenameCustomSearchAttributeRequest {
    // The namespace to rename the custom search attribute for.
    string namespace = 1;
    // The existing name of the custom search attribute to be renamed.
    string existing_custom_search_attribute_name = 2;
    // The new name of the custom search attribute.
    string new_custom_search_attribute_name = 3;
    // The version of the namespace for which this update is intended for.
    // The latest version can be found in the namespace status.
    string resource_version = 4;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 5;
}

message RenameCustomSearchAttributeResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message DeleteNamespaceRequest {
    // The namespace to delete.
    string namespace = 1;
    // The version of the namespace for which this delete is intended for.
    // The latest version can be found in the namespace status.
    string resource_version = 2;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 3;
}

message DeleteNamespaceResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message GetNamespaceExportSinksRequest {
    // The namespace the sinks are scoped to.
    string namespace = 1;
    // The requested size of the page to retrieve.
    // Cannot exceed 1000.
    // Optional, defaults to 100.
    int32 page_size = 2;
    // The page token if this is continuing from another response.
    // Optional, defaults to empty.
    string page_token = 3;
    // Filter sinks by their name.
    // Optional, defaults to empty.
    string name = 4;
}

message GetNamespaceExportSinksResponse {
    // the list of export sinks.
    repeated temporal.api.cloud.sink.v1.ExportSink sinks = 1;
    // The next page's token.
    string next_page_token = 2;
}

message GetNamespaceExportSinkRequest {
    // The namespace the sink is scoped to.
    string namespace = 1;
    // The sink id to retrieve.
    string id = 2;
}

message GetNamespaceExportSinkResponse {
    // The export sink.
    temporal.api.cloud.sink.v1.ExportSink sink = 1;
}

message CreateNamespaceExportSinkRequest {
    // The namespace the sink is scoped to.
    string namespace = 1;
    // The specification of the sink to create.
    temporal.api.cloud.sink.v1.ExportSinkSpec spec = 2;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 3;
}

message CreateNamespaceExportSinkResponse {
    // The id of the sink that was created.
    string id = 1;
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 2;
}

message UpdateNamespaceExportSinkRequest {
    // The namespace the sink is scoped to.
    string namespace = 1;
    // The sink id to update.
    string id = 2;
    // The updated sink specification to apply.
    temporal.api.cloud.sink.v1.ExportSinkSpec spec = 3;
    // The version of the export sink for which this update is intended for.
    // The latest version can be found in the GetNamespaceExportSink operation response.
    string resource_version = 4;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 5;
}

message UpdateNamespaceExportSinkResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message DeleteNamespaceExportSinkRequest {
    // The namespace the sink is scoped to.
    string namespace = 1;
    // The sink id to delete.
    string id = 2;
    // The version of the user for which this delete is intended for.
    // The latest version can be found in the GetNamespaceExportSink operation response.
    string resource_version = 3;
    // The id to use for this async operation - optional
    string async_operation_id = 4;
}

message DeleteNamespaceExportSinkResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message GetRegionsRequest {
}

message GetRegionsResponse {
    // The temporal cloud regions.
    repeated temporal.api.cloud.region.v1.Region regions = 1;
}

message GetRegionRequest {
    // The id of the region to get.
    string region = 1;
}

message GetRegionResponse {
    // The temporal cloud region.
    temporal.api.cloud.region.v1.Region region = 1;
}

message GetAccountRequest {
}

message GetAccountResponse {
    // The account.
    temporal.api.cloud.account.v1.Account account = 1;
}

message UpdateAccountRequest {
    // The updated account specification to apply.
    temporal.api.cloud.account.v1.AccountSpec spec = 1;
    // The version of the account for which this update is intended for.
    // The latest version can be found in the GetAccount operation response.
    string resource_version = 2;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 3;
}

message UpdateAccountResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message GetAuditLogSinksRequest {
    // The requested size of the page to retrieve.
    // Cannot exceed 1000.
    // Optional, defaults to 100.
    int32 page_size = 1;
    // The page token if this is continuing from another response.
    // Optional, defaults to empty.
    string page_token = 2;
    // Filter sinks by their name.
    // Optional, defaults to empty.
    string name = 3;
}

message GetAuditLogSinksResponse {
    // the list of audit log sinks.
    repeated temporal.api.cloud.sink.v1.ExportSink sinks = 1;
    // The next page's token.
    string next_page_token = 2;
}

message GetAuditLogSinkRequest {
    // The audit log sink id to retrieve.
    string id = 1;
}

message GetAuditLogSinkResponse {
    // The audit log sink.
    temporal.api.cloud.sink.v1.ExportSink sink = 1;
}

message CreateAuditLogSinkRequest {
    // The specification of the audit log sink to create.
    temporal.api.cloud.sink.v1.AuditLogSink spec = 1;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 2;
}

message CreateAuditLogSinkResponse {
    // The id of the audit log sink that was created.
    string id = 1;
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 2;
}

message UpdateAuditLogSinkRequest {
    // The sink id to update.
    string id = 1;
    // The updated audit log sink specification to apply.
    temporal.api.cloud.sink.v1.AuditLogSink spec = 2;
    // The version of the audit log sink for which this update is intended for.
    // The latest version can be found in the GetAuditLogSink operation response.
    string resource_version = 3;
    // The id to use for this async operation.
    // Optional, if not provided a random id will be generated.
    string async_operation_id = 4;
}

message UpdateAuditLogSinkResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

message DeleteAuditLogSinkRequest {
    // The namespace the sink is scoped to.
    string namespace = 1;
    // The sink id to delete.
    string id = 2;
    // The version of the user for which this delete is intended for.
    // The latest version can be found in the GetAuditLogSink operation response.
    string resource_version = 3;
    // The id to use for this async operation - optional
    string async_operation_id = 4;
}

message DeleteAuditLogSinkResponse {
    // The async operation.
    temporal.api.cloud.operation.v1.AsyncOperation async_operation = 1;
}

